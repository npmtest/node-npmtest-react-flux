{"/home/travis/build/npmtest/node-npmtest-react-flux/test.js":"/* istanbul instrument in package npmtest_react_flux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-flux/lib.npmtest_react_flux.js":"/* istanbul instrument in package npmtest_react_flux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_flux = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_flux = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-flux/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-flux && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_flux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_flux\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_flux.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_flux.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_flux.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_flux.__dirname + '/lib.npmtest_react_flux.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/index.js":"module.exports = require('./lib/index');","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/lib/index.js":"var Constants = require('./constants');\nvar Actions = require('./actions');\nvar Store = require('./store');\nvar MixinFor = require('./mixinFor');\nvar Dispatcher = require('./dispatcher');\nvar Configs = require('./configs');\n\nvar dispatcher = new Dispatcher();\n\nmodule.exports = {\n\n\tconfigs: Configs,\n\t/**\n\t * createActions\n\t * @param {object} actions\n\t */\n\tcreateActions: function (actions) {\n\t\treturn new Actions(dispatcher, actions);\n\t},\n\n\t/**\n\t * createStore\n\t * @param {object} storeMixin\n\t * @param {array} handlers\n\t */\n\tcreateStore: function (storeMixin, handlers) {\n\t\treturn new Store(dispatcher, storeMixin, handlers);\n\t},\n\n\t/**\n\t * createConstants\n\t * @param {array} constants\n\t *\n\t */\n\tcreateConstants: function (constants, prefix) {\n\t\treturn new Constants(constants, prefix);\n\t},\n\n\t/**\n\t * dispatch a message\n\t * @param {string} constant\n\t * @param {object} payload\n\t */\n\tdispatch: function (constant, payload) {\n\t\tdispatcher.dispatch(constant, payload);\n\t},\n\n\t/**\n\t * The global dispatcher\n\t */\n\tdispatcher: dispatcher,\n\n\t/**\n\t * Mixin\n\t */\n\tmixinFor: MixinFor\n\n};\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/lib/constants.js":"var _forEach = require('lodash/collection/forEach');\nvar _isArray = require('lodash/lang/isArray');\nvar _isString = require('lodash/lang/isString');\n\nvar cfgs = require('./configs').constants.get();\n\nmodule.exports = function (constants, prefix) {\n\n\tif (!_isArray(constants)) {\n\t\tthrow new Error('createConstants expects first parameter to be an array of strings');\n\t}\n\n\tprefix = prefix || '';\n\n\tif (!_isString(prefix)) {\n\t\tthrow new Error('createConstants expects second parameter string');\n\t}\n\n\tif (prefix.length > 0) {\n\t\tprefix += cfgs.separator;\n\t}\n\n\tvar ret = {};\n\t_forEach(constants, function (constant) {\n\n\t\tif (!_isString(constant)) {\n\t\t\tthrow new Error('createConstants expects all constants to be strings');\n\t\t}\n\n\t\tret[constant] = prefix + constant;\n\t\tret[constant + '_' + cfgs.successSuffix] = prefix + constant + cfgs.separator + cfgs.successSuffix;\n\t\tret[constant + '_' + cfgs.failSuffix] = prefix + constant + cfgs.separator + cfgs.failSuffix;\n\t\tret[constant + '_' + cfgs.afterSuffix] = prefix + constant + cfgs.separator + cfgs.afterSuffix;\n\t});\n\treturn ret;\n\n};\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/lib/configs.js":"var _isString = require('lodash/lang/isString');\n\nvar CONSTANTS_DEFAULT_SEPARATOR = '_';\nvar CONSTANTS_DEFAULT_SUCCESS_SUFFIX = 'SUCCESS';\nvar CONSTANTS_DEFAULT_FAIL_SUFFIX = 'FAIL';\nvar CONSTANTS_DEFAULT_AFTER_SUFFIX = 'AFTER';\n\nvar CONFIGS = {\n\tconstants: {\n\t\tseparator: CONSTANTS_DEFAULT_SEPARATOR,\n\t\tsuccessSuffix: CONSTANTS_DEFAULT_SUCCESS_SUFFIX,\n\t\tfailSuffix: CONSTANTS_DEFAULT_FAIL_SUFFIX,\n\t\tafterSuffix: CONSTANTS_DEFAULT_AFTER_SUFFIX\n\n\t}\n};\n\nmodule.exports = {\n\n\t/**\n\t * constants\n\t */\n\tconstants: {\n\n\t\t/**\n\t\t * @param {string} separator\n\t\t */\n\t\tsetSeparator: function (separator) {\n\t\t\tif (!_isString(separator) || !separator.length) {\n\t\t\t\tthrow new Error('Constants.separator must be a non empty string');\n\t\t\t}\n\t\t\tCONFIGS.constants.separator = separator;\n\t\t},\n\n\t\t/**\n\t\t * @param {string} suffix\n\t\t */\n\t\tsetSuccessSuffix: function (suffix) {\n\t\t\tif (!_isString(suffix) || !suffix.length) {\n\t\t\t\tthrow new Error('Constants.successSuffix must be a non empty string');\n\t\t\t}\n\t\t\tCONFIGS.constants.successSuffix = suffix;\n\t\t},\n\n\t\t/**\n\t\t * @param {string} suffix\n\t\t */\n\t\tsetFailSuffix: function (suffix) {\n\t\t\tif (!_isString(suffix) || !suffix.length) {\n\t\t\t\tthrow new Error('Constants.failSuffix must be a non empty string');\n\t\t\t}\n\t\t\tCONFIGS.constants.failSuffix = suffix;\n\t\t},\n\n\t\t/**\n\t\t * @param {string} suffix\n\t\t */\n\t\tsetAfterSuffix: function (suffix) {\n\t\t\tif (!_isString(suffix) || !suffix.length) {\n\t\t\t\tthrow new Error('Constants.afterSuffix must be a non empty string');\n\t\t\t}\n\t\t\tCONFIGS.constants.afterSuffix = suffix;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tresetToDefaults: function () {\n\t\t\tCONFIGS.constants.separator = CONSTANTS_DEFAULT_SEPARATOR;\n\t\t\tCONFIGS.constants.successSuffix = CONSTANTS_DEFAULT_SUCCESS_SUFFIX;\n\t\t\tCONFIGS.constants.failSuffix = CONSTANTS_DEFAULT_FAIL_SUFFIX;\n\t\t\tCONFIGS.constants.afterSuffix = CONSTANTS_DEFAULT_AFTER_SUFFIX;\n\t\t},\n\n\t\tget: function () {\n\t\t\treturn CONFIGS.constants;\n\t\t}\n\n\t}\n\n};\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/lib/actions.js":"var _merge = require('lodash/object/merge');\nvar _forEach = require('lodash/collection/forEach');\nvar _isArray = require('lodash/lang/isArray');\nvar Promise = Promise || require('promise');\n\nvar constantsConfigs = require('./configs').constants.get();\n\nvar Actions = function (dispather, actions) {\n\n\tthis._dispatcher = dispather;\n\tthis._registerActions(actions);\n\n};\n\nActions.prototype = _merge(Actions.prototype, {\n\n\t/**\n\t *@param {object} actions\n\t */\n\t_registerActions: function (actions) {\n\t\t_forEach(actions, function (options, actionName) {\n\t\t\tif (!_isArray(options)) {\n\t\t\t\tthrow new Error('ReactFlux.Actions: Action must be an array {login: [CONSTANT, callback]}');\n\t\t\t}\n\t\t\tvar constant = options[0];\n\t\t\tvar callback = options[1];\n\t\t\tif (typeof callback === \"undefined\") {\n\t\t\t\tcallback = function () {\n\t\t\t\t};\n\t\t\t}\n\t\t\telse if (typeof callback != 'function') {\n\t\t\t\tthrow new Error('ReactFlux.Actions: you did not provide a valid callback for action: ' + actionName);\n\t\t\t}\n\t\t\tthis[actionName] = this._createAction(actionName, constant, callback);\n\t\t}.bind(this));\n\t},\n\n\t/**\n\t *@param {string} name\n\t *@param {string} constant\n\t *@param {string} callback\n\t */\n\t_createAction: function (name, constant, callback) {\n\t\treturn function () {\n\t\t\tthis._dispatch(constant, null, arguments);\n\t\t\tvar resp = null;\n\t\t\ttry {\n\t\t\t\tresp = callback.apply(this, arguments);\n\t\t\t\tif (!!resp && typeof resp == 'object' && Object.prototype.toString.call(resp) == '[object Error]') {\n\t\t\t\t\tthrow resp;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tresp = new Promise(function (_, reject) {\n\t\t\t\t\treject(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\tPromise.resolve(resp).then(function (payload) {\n\t\t\t\tthis._dispatch(constant, 'successSuffix', payload);\n\t\t\t\tthis._dispatch(constant, 'afterSuffix', payload);\n\t\t\t}.bind(this), function (payload) {\n\t\t\t\tthis._dispatch(constant, 'failSuffix', payload);\n\t\t\t\tthis._dispatch(constant, 'afterSuffix', payload);\n\t\t\t}.bind(this))\n\t\t\t\t.catch(function (e) {\n\t\t\t\t\tconsole.error(e.toString(), e.stack);\n\t\t\t\t});\n\t\t}.bind(this);\n\t},\n\n\t/**\n\t *@param {string} constant\n\t *@param {string} suffixName\n\t *@param {mixed} payload\n\t */\n\t_dispatch: function (constant, suffixName, payload) {\n\t\tif (!!suffixName) {\n\t\t\tconstant += constantsConfigs.separator + constantsConfigs[suffixName];\n\t\t}\n\t\tthis._dispatcher.dispatch(constant, payload);\n\t}\n\n});\n\nmodule.exports = Actions;\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/lib/store.js":"var _assign = require('lodash/object/assign');\nvar _forEach = require('lodash/collection/forEach');\nvar _isArray = require('lodash/lang/isArray');\nvar _cloneDeep = require('lodash/lang/cloneDeep');\nvar MixinFor = require('./mixinFor');\n\nvar CHANGE_EVENT = 'change';\n\nvar StoreActionHandler = require('./storeActionHandler');\n\n\nfunction FluxState(initState) {\n\tvar _state = initState;\n\n\tthis.assign = function (newState) {\n\t\t_state = _assign(_state, newState);\n\t},\n\n\tthis.get = function (key) {\n\t\treturn _state[key];\n\t},\n\n\tthis.getClone = function (key) {\n\t\tvar v = _state[key];\n\t\tif (v instanceof Object && v !== null) {\n\t\t\treturn _cloneDeep(v);\n\t\t}\n\t\treturn v;\n\t},\n\n\tthis.replaceState = function (newState) {\n\t\t_state = newState;\n\t},\n\n\tthis.getState = function () {\n\t\treturn _state;\n\t}\n\n\tthis.getStateClone = function () {\n\t\treturn _cloneDeep(_state);\n\t}\n\n}\n\n/**\n * Flux Store\n * @param {object} dispatcher\n * @param {object} storeMixin\n * @param {array} handlers\n */\nvar Store = function (dispatcher, storeMixin, handlers) {\n\tthis.state = new FluxState({\n\t\t_action_states: {}\n\t});\n\tthis._events = {};//used by store event emitter\n\tthis._actionHandlers = {};\n\tthis._constantHandlers = {};\n\tthis._dispatcherIndexes = {};\n\tthis._dispatcher = dispatcher;\n\tthis._getInitialStateCalls = [];\n\tthis._storeDidMountCalls = [];\n\n\tthis._storeMixin(storeMixin);\n\tthis._setInitialState();\n\tif (!!handlers) {\n\t\tthis._setConstantHandlers(handlers);\n\t}\n\t_forEach(this._storeDidMountCalls, function (fn) {\n\t\tfn();\n\t});\n};\n\n\nStore.prototype = {\n\n\t/**\n\t * @param {object} newState\n\t */\n\tsetState: function (newState) {\n\t\tthis.state.assign(newState);\n\t\tthis._emit(CHANGE_EVENT);\n\t},\n\n\t/**\n\t * @param {object} newState\n\t */\n\treplaceState: function (newState) {\n\t\tthis.state.replaceState(newState);\n\t\tthis._emit(CHANGE_EVENT);\n\t},\n\n\t/**\n\t * @param {string} propertyName\n\t * @return {mixed}\n\t */\n\tget: function (propertyName) {\n\t\treturn this.state.get(propertyName);\n\t},\n\n\tgetClone: function (propertyName) {\n\t\treturn this.state.getClone(propertyName);\n\t},\n\n\tgetState: function () {\n\t\treturn this.state.getState();\n\t},\n\n\tgetStateClone: function () {\n\t\treturn this.state.getStateClone();\n\t},\n\n\n\t/**\n\t * @param {string} constant\n\t * @param {object} newState\n\t */\n\tsetActionState: function (constant, newState) {\n\t\tvar actionStates = this.state.get('_action_states');\n\t\tactionStates[constant] = _assign(actionStates[constant] || {}, newState);\n\t\tthis.setState({\n\t\t\t'_action_states': actionStates\n\t\t});\n\t},\n\n\t/**\n\t * @param {string} constant\n\t */\n\tresetActionState: function (constant) {\n\t\tif (typeof this._actionHandlers[constant] === 'undefined') {\n\t\t\tthrow new Error('Store.resetActionState constant handler for [' + constant + '] is not defined');\n\t\t}\n\t\tvar actionStates = this.state.get('_action_states');\n\t\tactionStates[constant] = this._actionHandlers[constant].getInitialState();\n\t\tthis.setState({\n\t\t\t'_action_states': actionStates\n\t\t});\n\t},\n\n\t/**\n\t * @param {string} constant - constant to get handler state for\n\t * @param {string} [key] - a specfic key to get\n\t */\n\tgetActionState: function (constant, key) {\n\t\tif (typeof this._actionHandlers[constant] === 'undefined') {\n\t\t\tthrow new Error('Store.getActionState constant handler for [' + constant + '] is not defined');\n\t\t}\n\n\t\tvar actionState = this.state.get('_action_states');\n\n\t\tif (typeof key === \"undefined\") {\n\t\t\treturn actionState[constant];\n\t\t}\n\t\treturn actionState[constant][key];\n\t},\n\n\t/**\n\t *\n\t */\n\tisStore: function () {\n\t\treturn true;\n\t},\n\n\t/**\n\t * @param {function} callback\n\t */\n\tonChange: function (callback) {\n\t\tthis._on(CHANGE_EVENT, callback);\n\t},\n\n\t/**\n\t * @param {function} callback\n\t */\n\toffChange: function (callback) {\n\t\tthis._off(CHANGE_EVENT, callback);\n\t},\n\n\n\t/**\n\t * set extra properties & methods for this Store\n\t * @param {object} storeMixin\n\t */\n\t_storeMixin: function (storeMixin) {\n\t\tif (storeMixin && storeMixin.mixins && _isArray(storeMixin.mixins)) {\n\t\t\t_forEach(storeMixin.mixins, this._storeMixin.bind(this));\n\t\t}\n\t\t_forEach(storeMixin, function (prop, propName) {\n\t\t\tif (propName === 'mixins') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof prop === 'function') {\n\t\t\t\tprop = prop.bind(this);\n\t\t\t}\n\n\t\t\tif (propName === 'getInitialState') {\n\t\t\t\tthis._getInitialStateCalls.push(prop);\n\t\t\t} else if (propName === 'storeDidMount') {\n\t\t\t\tthis._storeDidMountCalls.push(prop);\n\t\t\t} else {\n\t\t\t\tthis[propName] = prop;\n\t\t\t}\n\t\t}.bind(this));\n\t},\n\n\t/**\n\t * @param {string} constant\n\t * @param {object} configs\n\t * @return {FluxStore} self\n\t */\n\taddActionHandler: function (constant, configs) {\n\t\tthis._actionHandlers[constant] = new StoreActionHandler(this, constant, configs);\n\t\treturn this;\n\t},\n\n\t/**\n\t * Set constant handlers for this Store\n\t * @param {array} handlers\n\t */\n\t_setConstantHandlers: function (handlers) {\n\t\tif (!_isArray(handlers)) {\n\t\t\tthrow new Error('store expects handler definitions to be an array');\n\t\t}\n\t\t_forEach(handlers, function (options) {\n\t\t\tif (!_isArray(options)) {\n\t\t\t\tthrow new Error('store expects handler definition to be an array');\n\t\t\t}\n\t\t\tvar constant, handler, waitFor;\n\n\t\t\tconstant = options[0];\n\t\t\tif (options.length === 2) {\n\t\t\t\twaitFor = null;\n\t\t\t\thandler = options[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\twaitFor = options[1];\n\t\t\t\thandler = options[2];\n\t\t\t}\n\t\t\tif (typeof constant !== 'string') {\n\t\t\t\tthrow new Error('store expects all handler definitions to contain a constant as the first parameter');\n\t\t\t}\n\t\t\tif (typeof handler !== 'function') {\n\t\t\t\tthrow new Error('store expects all handler definitions to contain a callback');\n\t\t\t}\n\t\t\tif (!!waitFor && !_isArray(waitFor)) {\n\t\t\t\tthrow new Error('store expects waitFor to be an array of stores');\n\t\t\t}\n\t\t\tvar waitForIndexes = null;\n\t\t\tif (waitFor) {\n\t\t\t\twaitForIndexes = waitFor.map(function (store) {\n\t\t\t\t\tif (!(store instanceof Store)) {\n\t\t\t\t\t\tthrow new Error('store expects waitFor to be an array of stores');\n\t\t\t\t\t}\n\t\t\t\t\treturn store._getHandlerIndex(constant);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._constantHandlers[constant] = handler.bind(this);\n\t\t\tvar dispatcherIndex = this._dispatcher.register(constant, this._constantHandlers[constant], waitForIndexes);\n\t\t\tthis._dispatcherIndexes[constant] = dispatcherIndex;\n\t\t}.bind(this));\n\t},\n\n\t/**\n\t * Get dispatcher idx of this constant callback for this store\n\t * @param {string} constant\n\t * @return {number} Index of constant callback\n\t */\n\t_getHandlerIndex: function (constant) {\n\t\tif (typeof this._dispatcherIndexes[constant] === \"undefined\") {\n\t\t\tthrow new Error('Can not get store handler for constant: ' + constant);\n\t\t}\n\t\treturn this._dispatcherIndexes[constant];\n\t},\n\n\t/**\n\t * Sets intial state of the Store\n\t */\n\t_setInitialState: function () {\n\t\tthis.setState(this.getInitialState());\n\t},\n\n\t/**\n\t * Gets initial state of the store\n\t *\n\t * @return {mixed} Store initial state\n\t */\n\tgetInitialState: function () {\n\t\tvar state = {};\n\n\t\t_forEach(this._getInitialStateCalls, function (fn) {\n\t\t\t_assign(state, fn());\n\t\t});\n\n\t\treturn state;\n\t},\n\n\n\t/**\n\t * @return {Object} A mixin for React Components\n\t */\n\tmixinFor: function () {\n\t\treturn MixinFor(this);\n\t},\n\n\t/**\n\t *\n\t * @param {String} evt\n\t * @param {Function} handler\n\t * @return  {Function} handler\n\t */\n\t_on: function (evt, handler) {\n\t\tif (typeof this._events[evt] === 'undefined') {\n\t\t\tthis._events[evt] = [];\n\t\t}\n\t\tthis._events[evt].push(handler);\n\t\treturn handler;\n\t},\n\n\t/**\n\t *\n\t * @param {String} evt\n\t * @param {Function} handler\n\t */\n\t_off: function (evt, handler) {\n\t\tif (typeof this._events[evt] !== 'undefined') {\n\t\t\tfor (var i = 0, len = this._events[evt].length; i < len; i++) {\n\t\t\t\tif (this._events[evt][i] === handler) {\n\t\t\t\t\tthis._events[evt].splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t *\n\t * @param {String} evt\n\t */\n\t_emit: function (evt) {\n\t\tif (typeof this._events[evt] === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\t_forEach(this._events[evt], function (listener) {\n\t\t\tif ('function' === typeof listener) {\n\t\t\t\tlistener.apply(null, args);\n\t\t\t}\n\t\t});\n\t},\n\n};\n\nmodule.exports = Store;\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/lib/mixinFor.js":"var _forEach = require('lodash/collection/forEach');\n\n\nmodule.exports = function () {\n\tvar stores = Array.prototype.slice.call(arguments);\n\tif (!stores.length) {\n\t\tthrow new Error('Flux.mixinFor expects a store or a list of stores');\n\t}\n\t_forEach(stores, function (store) {\n\t\tvar isNotOk = (\n\t\t\ttypeof store === 'undefined' || typeof store.onChange !== 'function' || typeof store.offChange !== 'function'\n\t\t);\n\t\tif (isNotOk) {\n\t\t\tthrow new Error('Flux.mixinFor expects a store or an array of stores');\n\t\t}\n\t});\n\n\n\treturn {\n\n\t\tcomponentWillMount: function () {\n\t\t\tif (typeof this._react_flux_onChange === \"undefined\") {\n\t\t\t\tthis._react_flux_onChange = function () {\n\t\t\t\t\tif (this.isMounted()) {\n\t\t\t\t\t\tthis.setState(this.getStateFromStores());\n\t\t\t\t\t}\n\t\t\t\t}.bind(this);\n\t\t\t}\n\t\t\tthis.setState(this.getStateFromStores());\n\t\t},\n\n\t\tcomponentDidMount: function () {\n\t\t\tfor (var i = 0; i < stores.length; i++) {\n\t\t\t\tstores[i].onChange(this._react_flux_onChange);\n\t\t\t}\n\t\t},\n\n\t\tcomponentWillUnmount: function () {\n\t\t\tfor (var i = 0; i < stores.length; i++) {\n\t\t\t\tstores[i].offChange(this._react_flux_onChange);\n\t\t\t}\n\t\t}\n\t};\n\n};\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/lib/storeActionHandler.js":"var _isString = require('lodash/lang/isString');\n\nvar constantsConfigs = require('./configs').constants.get();\n\nvar HANDLER_NAMES = ['before', 'after', 'success', 'fail'];\n\nfunction StoreActionHandler(store, constant, configs) {\n\tif (!store || typeof store.isStore !== 'function' || !store.isStore()) {\n\t\tthrow new Error('StoreActionHandler expects first parameter to be a store');\n\t}\n\tif (!_isString(constant) || !constant.length) {\n\t\tthrow new Error('StoreActionHandler expects second parameter to be a constant(string)');\n\t}\n\tif (typeof configs.getInitialState == 'undefined') {\n\t\tconfigs.getInitialState = function () {\n\t\t\treturn {};\n\t\t};\n\t}\n\tif (typeof configs.getInitialState != 'function') {\n\t\tthrow new Error('StoreActionHandler expects getInitialState to be a function');\n\t}\n\n\tconfigs = configs || {};\n\tthis.parent = store;\n\tthis.constant = constant;\n\tthis.getInitialState = configs.getInitialState;\n\tthis.before = configs.before || null;\n\tthis.after = configs.after || null;\n\tthis.success = configs.success || null;\n\tthis.fail = configs.fail || null;\n\n\tthis.parent.setActionState(this.constant, this.getInitialState());\n\n\t//register handlers for this constant\n\tvar handlers = [];\n\tvar len = HANDLER_NAMES.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tvar handlerName = HANDLER_NAMES[i];\n\t\tif (this[handlerName] === null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (typeof this[handlerName] !== 'function') {\n\t\t\tthrow new Error('StoreActionHandler expects \"' + handlerName + '\" to be a function');\n\t\t}\n\t\tvar constantName = this.constant;\n\t\tif (handlerName !== 'before') {\n\t\t\tconstantName += constantsConfigs.separator + constantsConfigs[handlerName + 'Suffix'];\n\t\t}\n\t\thandlers.push([constantName, this[handlerName].bind(this)]);\n\t}\n\tstore._setConstantHandlers(handlers);\n}\n\nStoreActionHandler.prototype = {\n\t/**\n\t * @param {object} newState\n\t */\n\tsetState: function (newState) {\n\t\tthis.parent.setActionState(this.constant, newState);\n\t},\n\t/**\n\t * @return {object} state\n\t */\n\tgetState: function () {\n\t\treturn this.parent.getActionState(this.constant);\n\t}\n};\n\nmodule.exports = StoreActionHandler;\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/lib/dispatcher.js":"var Promise = Promise || require('promise');\nvar _merge = require('lodash/object/merge');\nvar _isArray = require('lodash/lang/isArray');\nvar _isString = require('lodash/lang/isString');\nvar _forEach = require('lodash/collection/forEach');\n\n/**\n * Dispatcher\n */\nfunction Dispatcher() {\n\t/**\n\t * Registry of callbacks, waitFor, promises, etc\n\t * each constant has it's own array of callbacks, waitFor, promises, etc\n\t */\n\tthis._registry = {};\n}\n\nDispatcher.prototype = _merge(Dispatcher.prototype, {\n\n\t/**\n\t * Registers a callback\n\t * @param {string} constant\n\t * @param {function} callback\n\t * @param {array|null} waitFor Array indexes to callbacks\n\t */\n\tregister: function (constant, callback, waitForIndexes) {\n\t\tif (!_isString(constant) || !constant.length) {\n\t\t\tthrow new Error('Dispatcher.register: constant must be a string');\n\t\t}\n\t\twaitForIndexes = waitForIndexes || null;\n\n\t\tif (typeof callback != 'function') {\n\t\t\tthrow new Error('Dispatcher.register expects second parameter to be a callback');\n\t\t}\n\n\t\tif (waitForIndexes !== null && !_isArray(waitForIndexes)) {\n\t\t\tthrow new Error('Dispatcher.register expects third parameter to be null or an array');\n\t\t}\n\n\t\tvar registry = this._getRegistry(constant);\n\t\tregistry.callbacks.push(callback);\n\t\tregistry.waitFor.push(waitForIndexes);\n\t\treturn registry.callbacks.length - 1;\n\t},\n\n\n\t/**\n\t * Dispatch\n\t * @param {string} constant\n\t * @param {object} payload\n\t */\n\tdispatch: function (constant, payload) {\n\t\tvar registry = this._getRegistry(constant);\n\t\tregistry.dispatchQueue.push({\n\t\t\tconstant: constant,\n\t\t\tpayload: payload\n\t\t});\n\t\tthis._dispatch(registry);\n\t},\n\n\t_dispatch: function (registry) {\n\n\t\tif (registry.isDispatching || !registry.dispatchQueue.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tregistry.isDispatching = true;\n\t\tvar job = registry.dispatchQueue.shift();\n\n\t\tthis._createDispatchPromises(registry);\n\n\t\t_forEach(registry.callbacks, function (callback, idx) {\n\n\t\t\tvar resolver = (function (registry, idx, payload) {\n\t\t\t\treturn function () {\n\t\t\t\t\tPromise.resolve(registry.callbacks[idx](payload)).then(function () {\n\t\t\t\t\t\tregistry.resolves[idx](payload);\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tregistry.rejects[idx](new Error('Dispatch callback error'));\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t})(registry, idx, job.payload);\n\n\t\t\tvar waitFor = registry.waitFor[idx];\n\t\t\tif (!waitFor) {\n\t\t\t\tresolver();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar promisesToWaitFor = this._getPromisesByIndexes(registry, waitFor);\n\t\t\t\tPromise.all(promisesToWaitFor).then(\n\t\t\t\t\tresolver,\n\t\t\t\t\tresolver  //Should we really resolve the callback here?\n\t\t\t\t\t// Some of the WaitForStores callbacks rejected the request\n\t\t\t\t);\n\t\t\t}\n\t\t}.bind(this));//_forEach(registry.callbacks,\n\n\t\tPromise.all(registry.promises).then(function () {\n\t\t\tthis._onDispatchEnd(registry);\n\t\t}.bind(this), function () {\n\t\t\tthis._onDispatchEnd(registry);\n\t\t});\n\n\t},//dispatch\n\n\n\t/**\n\t * Gets a registry for a constant\n\t * @param {string} constant\n\t */\n\t_getRegistry: function (constant) {\n\t\tif (typeof this._registry[constant] == \"undefined\") {\n\t\t\tthis._registry[constant] = {\n\t\t\t\tcallbacks: [],\n\t\t\t\twaitFor: [],\n\t\t\t\tpromises: [],\n\t\t\t\tresolves: [],\n\t\t\t\trejects: [],\n\t\t\t\tdispatchQueue: [],\n\t\t\t\tisDispatching: false\n\t\t\t};\n\t\t}\n\t\treturn this._registry[constant];\n\t},\n\n\t/**\n\t * @param {object} registry\n\t * @param {array} callbacks\n\t */\n\t_getPromisesByIndexes: function (registry, indexes) {\n\t\treturn indexes.map(function (idx) {\n\t\t\treturn registry.promises[idx];\n\t\t});\n\t},\n\n\t/**\n\t * Create promises for all callbacks in this registry\n\t * @param {object} registry\n\t */\n\t_createDispatchPromises: function (registry) {\n\t\tregistry.promises = [];\n\t\tregistry.resolves = [];\n\t\tregistry.rejects = [];\n\t\t_forEach(registry.callbacks, function (callback, i) {\n\t\t\tregistry.promises[i] = new Promise(function (resolve, reject) {\n\t\t\t\tregistry.resolves[i] = resolve;\n\t\t\t\tregistry.rejects[i] = reject;\n\t\t\t});\n\t\t});\n\t},\n\n\n\t/**\n\t * Clean registry\n\t * @param {object} registry\n\t */\n\t_onDispatchEnd: function (registry) {\n\t\tregistry.promises = [];\n\t\tregistry.resolves = [];\n\t\tregistry.rejects = [];\n\t\tregistry.isDispatching = false;\n\t\tthis._dispatch(registry);\n\t}\n\n});\n\nmodule.exports = Dispatcher;\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/webpack.config.js":"var webpack = require('webpack');\n\nvar UglifyJsPlugin = require('webpack/lib/optimize/UglifyJsPlugin');\n\nmodule.exports = {\n\n\tcontext: __dirname + '/lib/',\n\n\twatch: true,\n\n\tentry: './index.js',\n\n\toutput: {\n\t\tpath: './dist/',\n\t\tfilename: 'react-flux.js',\n\t\tlibrary: 'ReactFlux',\n\t\tlibraryTarget: 'umd'\n\t},\n\n\tresolve: {\n\t\textensions: ['', '.js'],\n\t},\n\n\tmodule: {},\n\n\texternals: {\n\t\tpromise: true,\n\t\treact: {\n\t\t\troot: 'React',\n\t\t\tcommonjs: 'react',\n\t\t\tcommonjs2: 'react',\n\t\t\tamd: 'react'\n\t\t}\n\t},\n\n\tplugins: [\n\t\tnew UglifyJsPlugin()\n\t]\n};\n","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/codegen/templates/actionHandler.js":"\nStore.addActionHandler(constants.<%= constant %>, {\n\t\n\tgetInitialState: function(){\n\t\treturn {\n\n\t\t};\n\t},\n\n\tbefore: function(){\n\t\tthis.setState(\n\t\t\tthis.getInitialState()\n\t\t);\n\t},\n\n\tsuccess: function(resp){\n\n\t},\n\n\tfail: function(resp){\n\n\t},\n\n\tafter: function(){\n\n\t}\n\n});","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/codegen/templates/action.js":"\n\t<%= actionName %>: [constants.<%= constant%>, function(){\n\t\treturn {};\n\t}],\n\t","/home/travis/build/npmtest/node-npmtest-react-flux/node_modules/react-flux/codegen/templates/module.js":"module.exports = {\n\tconstants: require('./constants/<%= name %>.js'),\n\tactions: require('./actions/<%= name %>.js'),\n\tstore: require('./stores/<%= name %>.js'),\n};"}